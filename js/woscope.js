(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.woscope=f()}})(function(){var define,module,exports;return(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){'use strict';var shadersDict={vsLine:"precision highp float;\n#define GLSLIFY 1\n#define EPS 1E-6\nuniform float uInvert;\nuniform float uSize;\nattribute vec2 aStart, aEnd;\nattribute float aIdx;\nvarying vec4 uvl;\nvarying float vLen;\nvoid main () {\n    float tang;\n    vec2 current;\n    // All points in quad contain the same data:\n    // segment start point and segment end point.\n    // We determine point position from it's index.\n    float idx = mod(aIdx,4.0);\n    if (idx >= 2.0) {\n        current = aEnd;\n        tang = 1.0;\n    } else {\n        current = aStart;\n        tang = -1.0;\n    }\n    float side = (mod(idx, 2.0)-0.5)*2.0;\n    uvl.xy = vec2(tang, side);\n    uvl.w = floor(aIdx / 4.0 + 0.5);\n\n    vec2 dir = aEnd-aStart;\n    uvl.z = length(dir);\n    if (uvl.z > EPS) {\n        dir = dir / uvl.z;\n    } else {\n    // If the segment is too short draw a square;\n        dir = vec2(1.0, 0.0);\n    }\n    vec2 norm = vec2(-dir.y, dir.x);\n    gl_Position = vec4((current+(tang*dir+norm*side)*uSize)*uInvert,0.0,1.0);\n    //gl_PointSize = 20.0;\n}\n",fsLine:"precision highp float;\n#define GLSLIFY 1\n#define EPS 1E-6\n#define TAU 6.283185307179586\n#define TAUR 2.5066282746310002\n#define SQRT2 1.4142135623730951\nuniform float uSize;\nuniform float uIntensity;\nuniform vec4 uColor;\nvarying vec4 uvl;\nfloat gaussian(float x, float sigma) {\n    return exp(-(x * x) / (2.0 * sigma * sigma)) / (TAUR * sigma);\n}\n\nfloat erf(float x) {\n    float s = sign(x), a = abs(x);\n    x = 1.0 + (0.278393 + (0.230389 + (0.000972 + 0.078108 * a) * a) * a) * a;\n    x *= x;\n    return s - s / (x * x);\n}\nvoid main (void)\n{\n    float len = uvl.z;\n    vec2 xy = vec2((len/2.0+uSize)*uvl.x+len/2.0, uSize*uvl.y);\n    float alpha;\n\n    float sigma = uSize/4.0;\n    if (len < EPS) {\n    // If the beam segment is too short, just calculate intensity at the position.\n        alpha = exp(-pow(length(xy),2.0)/(2.0*sigma*sigma))/2.0/sqrt(uSize);\n    } else {\n    // Otherwise, use analytical integral for accumulated intensity.\n        alpha = erf((len-xy.x)/SQRT2/sigma) + erf(xy.x/SQRT2/sigma);\n        alpha *= exp(-xy.y*xy.y/(2.0*sigma*sigma))/2.0/len*uSize;\n    }\n    float afterglow = smoothstep(0.0, 0.33, uvl.w/2048.0);\n    alpha *= afterglow * uIntensity;\n    gl_FragColor = vec4(vec3(uColor), uColor.a * alpha);\n}\n",vsBlurTranspose:"precision highp float;\n#define GLSLIFY 1\nuniform float uSize;\nattribute vec2 aPos, aST;\nvarying vec2 vTexCoord;\nvoid main (void) {\n    gl_Position = vec4(aPos.y, aPos.x, 1, 1);\n    vTexCoord = aST*uSize/1024.0;\n}\n",fsBlurTranspose:"precision highp float;\n#define GLSLIFY 1\nuniform sampler2D uTexture;\nuniform float uSize;\nvarying vec2 vTexCoord;\nvoid main (void) {\n    float point = uSize/1024.0/1024.0*2.0;\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float sum = 0.0;\n    sum += texture2D(uTexture, vec2(vTexCoord.x - point*4.0, vTexCoord.y)).g * (1.0/25.0);\n    sum += texture2D(uTexture, vec2(vTexCoord.x - point*3.0, vTexCoord.y)).g * (2.0/25.0);\n    sum += texture2D(uTexture, vec2(vTexCoord.x - point*2.0, vTexCoord.y)).g * (3.0/25.0);\n    sum += texture2D(uTexture, vec2(vTexCoord.x - point*1.0, vTexCoord.y)).g * (4.0/25.0);\n    sum += texture2D(uTexture, vec2(vTexCoord.x            , vTexCoord.y)).g * (5.0/25.0);\n    sum += texture2D(uTexture, vec2(vTexCoord.x + point*1.0, vTexCoord.y)).g * (4.0/25.0);\n    sum += texture2D(uTexture, vec2(vTexCoord.x + point*2.0, vTexCoord.y)).g * (3.0/25.0);\n    sum += texture2D(uTexture, vec2(vTexCoord.x + point*3.0, vTexCoord.y)).g * (2.0/25.0);\n    sum += texture2D(uTexture, vec2(vTexCoord.x + point*4.0, vTexCoord.y)).g * (1.0/25.0);\n    gl_FragColor = vec4(0.0, sum, 0.0, 1.0);\n}\n",vsOutput:"precision highp float;\n#define GLSLIFY 1\nuniform float uSize;\nattribute vec2 aPos, aST;\nvarying vec2 vTexCoord;\nvoid main (void) {\n    gl_Position = vec4(aPos, 1, 1);\n    vTexCoord = aST*uSize/1024.0;\n}\n",fsOutput:"precision highp float;\n#define GLSLIFY 1\nuniform sampler2D uTexture;\nuniform float uAlpha;\nvarying vec2 vTexCoord;\nvoid main (void) {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.a = uAlpha;\n    gl_FragColor = color;\n}\n",vsProgress:"precision highp float;\n#define GLSLIFY 1\nattribute vec2 aPos;\nattribute vec2 aUV;\nvarying vec2 vUV;\nvoid main (void) {\n    gl_Position = vec4(aPos, 1, 1);\n    vUV = aUV;\n}\n",fsProgress:"precision highp float;\n#define GLSLIFY 1\nuniform float uProgress;\nuniform vec4 uColor;\nvarying vec2 vUV;\nfloat rect(vec2 p, vec2 s) {\n    return max(abs(p.x)-s.x,abs(p.y)-s.y);\n}\nvoid main (void) {\n    float p = clamp(uProgress, 0.0, 1.0);\n    float hw = 300.0;\n    vec2 size = vec2(800.0, 800.0);\n    vec2 c = size / 2.0;\n    vec2 uv = vUV*size - c;\n    float result = min(rect(uv,vec2(hw+5.,25.)),-rect(uv,vec2(hw+10.,30.)));\n    result = max(result,-rect(uv-vec2(hw*(p-1.0),0.0),vec2(hw*p, 20.0)));\n    gl_FragColor = uColor * clamp(result, 0.0, 1.0);\n}\n"};var defaultColor=[1/32,1,1/32,1],defaultBackground=[0,0,0,1];module.exports=woscope;function woscope(config){var canvas=config.canvas,gl=initGl(canvas,config.background,config.error),callback=config.callback||function(){},intensityCallback=config.intensityCallback||function(){return 1;},colorCallback=config.colorCallback||function(){return defaultColor;},onDestroy=config.onDestroy||function(){};var ctx={gl:gl,destroy:destroy,swap:config.swap,invert:config.invert,sweep:config.sweep,color2:config.color2,lineSize:config.lineSize===undefined?0.012:config.lineSize,lineShader:createShader(gl,shadersDict.vsLine,shadersDict.fsLine),blurShader:createShader(gl,shadersDict.vsBlurTranspose,shadersDict.fsBlurTranspose),outputShader:createShader(gl,shadersDict.vsOutput,shadersDict.fsOutput),progressShader:createShader(gl,shadersDict.vsProgress,shadersDict.fsProgress),progress:0,loaded:false,nSamples:4096,bloom:config.bloom,leftBuffer:new Float32Array(4096),rightBuffer:new Float32Array(4096),intensityCallback:intensityCallback,colorCallback:colorCallback,};function restartConnectionAttempts(){ctx.leftBuffer=new Float32Array(ctx.nSamples);ctx.rightBuffer=new Float32Array(ctx.nSamples);clearInterval(ctx.timerId);connect();ctx.timerId=setInterval(()=>{connect();},5000);}
function connect(){var connection=new WebSocket('ws://127.0.0.1:42988');connection.binaryType="arraybuffer";connection.onclose=()=>{restartConnectionAttempts();};connection.onerror=()=>{restartConnectionAttempts();};connection.onopen=()=>{clearInterval(ctx.timerId);};connection.onmessage=function(e){if(e.data instanceof ArrayBuffer){var dataView=new DataView(e.data);var leftBuffer=new Float32Array(ctx.nSamples);var rightBuffer=new Float32Array(ctx.nSamples);var even=true;for(var i=0;i<dataView.byteLength;i+=2){if(even){leftBuffer[i/4]=dataView.getInt16(i,true)/32767.0;}else{rightBuffer[(i-2)/4]=dataView.getInt16(i,true)/32767.0;}
even=!even;}
ctx.leftBuffer=leftBuffer;ctx.rightBuffer=rightBuffer;}};}
restartConnectionAttempts();Object.assign(ctx,{quadIndex:makeQuadIndex(ctx),vertexIndex:makeVertexIndex(ctx),outQuadArray:makeOutQuad(ctx),scratchBuffer:new Float32Array(ctx.nSamples*8),audioRamp:makeRamp(Math.ceil(ctx.nSamples/3))});Object.assign(ctx,makeFrameBuffer(ctx,canvas.width,canvas.height));function destroy(){var ext=gl.getExtension('WEBGL_lose_context');if(ext){ext.loseContext();}
if(ctx.sourceNode){ctx.sourceNode.disconnect();ctx.sourceNode.connect(audioCtx.destination);}
_loop=emptyContext;_progressLoop=emptyContext;function emptyContext(){Object.keys(ctx).forEach(function(val){delete ctx[val];});}}
var _loop=function loop(){draw(ctx,canvas);requestAnimationFrame(_loop);};callback(ctx);_loop();return ctx;}
function initGl(canvas,background,errorCallback){var gl=canvas.getContext('webgl')||canvas.getContext('experimental-webgl');if(!gl){var message='WebGL is not supported in this browser :(';if(errorCallback){errorCallback(message);}
throw new Error(message);}
gl.clearColor.apply(gl,background||defaultBackground);return gl;}
function createShader(gl,vsSource,fsSource){if(!supportsWebGl()){throw new Error('createShader: no WebGL context');}
var vs=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vs,vsSource);gl.compileShader(vs);if(!gl.getShaderParameter(vs,gl.COMPILE_STATUS)){var infoLog=gl.getShaderInfoLog(vs);gl.deleteShader(vs);throw new Error('createShader, vertex shader compilation:\n'+infoLog);}
var fs=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fs,fsSource);gl.compileShader(fs);if(!gl.getShaderParameter(fs,gl.COMPILE_STATUS)){var _infoLog=gl.getShaderInfoLog(fs);gl.deleteShader(vs);gl.deleteShader(fs);throw new Error('createShader, fragment shader compilation:\n'+_infoLog);}
var program=gl.createProgram();gl.attachShader(program,vs);gl.deleteShader(vs);gl.attachShader(program,fs);gl.deleteShader(fs);gl.linkProgram(program);if(!gl.getProgramParameter(program,gl.LINK_STATUS)){var _infoLog2=gl.getProgramInfoLog(program);gl.deleteProgram(program);throw new Error('createShader, linking:\n'+_infoLog2);}
return program;}
function makeQuadIndex(ctx){var gl=ctx.gl;var index=new Int16Array(ctx.nSamples*4);for(var i=index.length;i--;){index[i]=i;}
var vbo=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vbo);gl.bufferData(gl.ARRAY_BUFFER,index,gl.STATIC_DRAW);gl.bindBuffer(gl.ARRAY_BUFFER,null);return vbo;}
function makeVertexIndex(ctx){var gl=ctx.gl;var len=(ctx.nSamples-1)*2*3,index=new Uint16Array(len);for(var i=0,pos=0;i<len;){index[i++]=pos;index[i++]=pos+2;index[i++]=pos+1;index[i++]=pos+1;index[i++]=pos+2;index[i++]=pos+3;pos+=4;}
var vbo=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,vbo);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,index,gl.STATIC_DRAW);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);return vbo;}
function makeOutQuad(ctx){var gl=ctx.gl;var data=new Int16Array([-1,-1,0,0,-1,1,0,1,1,-1,1,0,1,1,1,1]);var vbo=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vbo);gl.bufferData(gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);gl.bindBuffer(gl.ARRAY_BUFFER,null);return vbo;}
function makeTargetTexture(gl,width,height){var texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,width,height,0,gl.RGBA,gl.UNSIGNED_BYTE,null);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR_MIPMAP_LINEAR);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.MIRRORED_REPEAT);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.MIRRORED_REPEAT);gl.generateMipmap(gl.TEXTURE_2D);gl.bindTexture(gl.TEXTURE_2D,null);return texture;}
function makeFrameBuffer(ctx,width,height){var gl=ctx.gl;var frameBuffer=gl.createFramebuffer();gl.bindFramebuffer(gl.FRAMEBUFFER,frameBuffer);frameBuffer.width=1024;frameBuffer.height=1024;return{renderBuffer:gl.createRenderbuffer(),frameBuffer:frameBuffer,lineTexture:makeTargetTexture(gl,frameBuffer.width,frameBuffer.height),blurTexture:makeTargetTexture(gl,frameBuffer.width,frameBuffer.height),blurTexture2:makeTargetTexture(gl,frameBuffer.width,frameBuffer.height),vbo:gl.createBuffer(),vbo2:gl.createBuffer()};}
function makeRamp(len){var arr=new Float32Array(len),dx=2/(len-1);for(var i=0;i<len;i++){arr[i]=i*dx-1;}
return arr;}
function loadWave(ctx){channelRouter(ctx,ctx.nSamples,ctx.leftBuffer,ctx.rightBuffer);}
function channelRouter(ctx,len,left,right){if(ctx.sweep&&ctx.swap){loadChannelsInto(ctx,len,ctx.vbo,ctx.audioRamp,right);loadChannelsInto(ctx,len,ctx.vbo2,ctx.audioRamp,left);}else if(ctx.sweep){loadChannelsInto(ctx,len,ctx.vbo,ctx.audioRamp,left);loadChannelsInto(ctx,len,ctx.vbo2,ctx.audioRamp,right);}else if(ctx.swap){loadChannelsInto(ctx,len,ctx.vbo,right,left);}else{loadChannelsInto(ctx,len,ctx.vbo,left,right);}}
function loadChannelsInto(ctx,len,vbo,xAxis,yAxis){var gl=ctx.gl,subArr=ctx.scratchBuffer;for(var i=0;i<len;i++){var t=i*8;subArr[t]=subArr[t+2]=subArr[t+4]=subArr[t+6]=xAxis[i];subArr[t+1]=subArr[t+3]=subArr[t+5]=subArr[t+7]=yAxis[i];}
gl.bindBuffer(gl.ARRAY_BUFFER,vbo);gl.bufferData(gl.ARRAY_BUFFER,subArr,gl.STATIC_DRAW);gl.bindBuffer(gl.ARRAY_BUFFER,null);}
function supportsWebGl(){var canvas=document.createElement('canvas'),supports='probablySupportsContext'in canvas?'probablySupportsContext':'supportsContext';if(supports in canvas){return canvas[supports]('webgl')||canvas[supports]('experimental-webgl');}
return 'WebGLRenderingContext'in window;}
function activateTargetTexture(ctx,texture){var gl=ctx.gl;gl.bindRenderbuffer(gl.RENDERBUFFER,ctx.renderBuffer);gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,ctx.frameBuffer.width,ctx.frameBuffer.height);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,ctx.renderBuffer);gl.bindTexture(gl.TEXTURE_2D,null);gl.bindRenderbuffer(gl.RENDERBUFFER,null);}
function draw(ctx,canvas){var gl=ctx.gl;loadWave(ctx);var width=canvas.width,height=canvas.height;if(!ctx.bloom){gl.bindFramebuffer(gl.FRAMEBUFFER,null);gl.viewport(0,0,width,height);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);drawLine(ctx,ctx.lineShader,ctx.vbo,ctx.colorCallback());if(ctx.sweep){drawLine(ctx,ctx.lineShader,ctx.vbo2,ctx.color2);}}else{gl.bindFramebuffer(gl.FRAMEBUFFER,ctx.frameBuffer);activateTargetTexture(ctx,ctx.lineTexture);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);gl.viewport(0,0,width,height);drawLine(ctx,ctx.lineShader,ctx.vbo,ctx.colorCallback());if(ctx.sweep){drawLine(ctx,ctx.lineShader,ctx.vbo2,ctx.color2);}
{gl.bindTexture(gl.TEXTURE_2D,ctx.lineTexture);gl.generateMipmap(gl.TEXTURE_2D);gl.bindTexture(gl.TEXTURE_2D,null);}
activateTargetTexture(ctx,ctx.blurTexture2);gl.viewport(0,0,width/2,height/2);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);drawTexture(ctx,ctx.lineTexture,width,ctx.outputShader);activateTargetTexture(ctx,ctx.blurTexture);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);drawTexture(ctx,ctx.blurTexture2,width/2,ctx.blurShader);activateTargetTexture(ctx,ctx.blurTexture2);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);drawTexture(ctx,ctx.blurTexture,width/2,ctx.blurShader);gl.bindFramebuffer(gl.FRAMEBUFFER,null);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);gl.viewport(0,0,width,height);drawTexture(ctx,ctx.lineTexture,width,ctx.outputShader);drawTexture(ctx,ctx.blurTexture2,width/2,ctx.outputShader,0.5);}}
function drawLine(ctx,shader,vbo,color){var gl=ctx.gl;gl.useProgram(shader);{var tmpPos=gl.getUniformLocation(shader,'uInvert');if(tmpPos&&tmpPos!==-1){gl.uniform1f(tmpPos,ctx.invert?-1:1);}
tmpPos=gl.getUniformLocation(shader,'uSize');if(tmpPos&&tmpPos!==-1){gl.uniform1f(tmpPos,ctx.lineSize);}
tmpPos=gl.getUniformLocation(shader,'uIntensity');if(tmpPos&&tmpPos!==-1){gl.uniform1f(tmpPos,ctx.intensityCallback());}
tmpPos=gl.getUniformLocation(shader,'uColor');if(tmpPos&&tmpPos!==-1){gl.uniform4fv(tmpPos,color||defaultColor);}}
var attribs=[];{gl.bindBuffer(gl.ARRAY_BUFFER,ctx.quadIndex);var idxAttr=gl.getAttribLocation(shader,'aIdx');if(idxAttr>-1){gl.enableVertexAttribArray(idxAttr);gl.vertexAttribPointer(idxAttr,1,gl.SHORT,false,2,0);attribs.push(idxAttr);}}
{gl.bindBuffer(gl.ARRAY_BUFFER,vbo);var _tmpPos=gl.getAttribLocation(shader,'aStart');if(_tmpPos>-1){gl.enableVertexAttribArray(_tmpPos);gl.vertexAttribPointer(_tmpPos,2,gl.FLOAT,false,8,0);attribs.push(_tmpPos);}
_tmpPos=gl.getAttribLocation(shader,'aEnd');if(_tmpPos>-1){gl.enableVertexAttribArray(_tmpPos);gl.vertexAttribPointer(_tmpPos,2,gl.FLOAT,false,8,8*4);attribs.push(_tmpPos);}}
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,ctx.vertexIndex);gl.drawElements(gl.TRIANGLES,(ctx.nSamples-1)*2*3,gl.UNSIGNED_SHORT,0);gl.disable(gl.BLEND);attribs.forEach(function(a){gl.disableVertexAttribArray(a);});gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);gl.bindBuffer(gl.ARRAY_BUFFER,null);gl.useProgram(null);}
function drawTexture(ctx,texture,size,shader,alpha){var gl=ctx.gl;alpha=alpha||1;gl.useProgram(shader);var attribs=[];gl.bindBuffer(gl.ARRAY_BUFFER,ctx.outQuadArray);{var tmpPos=gl.getAttribLocation(shader,'aPos');if(tmpPos>-1){gl.enableVertexAttribArray(tmpPos);gl.vertexAttribPointer(tmpPos,2,gl.SHORT,false,8,0);attribs.push(tmpPos);}
tmpPos=gl.getAttribLocation(shader,'aST');if(tmpPos>-1){gl.enableVertexAttribArray(tmpPos);gl.vertexAttribPointer(tmpPos,2,gl.SHORT,false,8,4);attribs.push(tmpPos);}}
gl.activeTexture(gl.TEXTURE0);gl.bindTexture(gl.TEXTURE_2D,texture);{var _tmpPos2=gl.getUniformLocation(shader,'uTexture');if(_tmpPos2&&_tmpPos2!==-1){gl.uniform1i(_tmpPos2,0);}
_tmpPos2=gl.getUniformLocation(shader,'uSize');if(_tmpPos2&&_tmpPos2!==-1){gl.uniform1f(_tmpPos2,size);}
_tmpPos2=gl.getUniformLocation(shader,'uAlpha');if(_tmpPos2&&_tmpPos2!==-1){gl.uniform1f(_tmpPos2,alpha);}}
gl.enable(gl.BLEND);gl.blendFunc(gl.ONE,gl.SRC_ALPHA);gl.drawArrays(gl.TRIANGLE_STRIP,0,4);attribs.forEach(function(a){gl.disableVertexAttribArray(a);});gl.bindBuffer(gl.ARRAY_BUFFER,null);gl.bindTexture(gl.TEXTURE_2D,null);gl.useProgram(null);}},{}]},{},[1])(1)});